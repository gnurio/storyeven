{"id":"node_modules/markdown-it/lib/rules_block/hr.js","dependencies":[{"name":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/package.json","includedInParent":true,"mtime":1597318560231},{"name":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/package.json","includedInParent":true,"mtime":1597318553241},{"name":"../common/utils","loc":{"line":5,"column":22},"parent":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/rules_block/hr.js","resolved":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/common/utils.js"}],"generated":{"js":"// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/markdown-it/lib/rules_block/hr.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/markdown-it/lib/rules_block/hr.js":"// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n"},"lineCount":46}},"error":null,"hash":"e1ee0349cd317302857e10065ff9c37b","cacheData":{"env":{}}}