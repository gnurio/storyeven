{"id":"node_modules/markdown-it/lib/rules_inline/state_inline.js","dependencies":[{"name":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/package.json","includedInParent":true,"mtime":1597318560231},{"name":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/package.json","includedInParent":true,"mtime":1597318553241},{"name":"../token","loc":{"line":6,"column":29},"parent":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/rules_inline/state_inline.js","resolved":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/token.js"},{"name":"../common/utils","loc":{"line":9,"column":29},"parent":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/rules_inline/state_inline.js","resolved":"/Users/georgynuridzhanyan/Documents/Code/JS & HTML/Odin/Node/storyeven/storyeven/node_modules/markdown-it/lib/common/utils.js"}],"generated":{"js":"// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/markdown-it/lib/rules_inline/state_inline.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}}],"sources":{"node_modules/markdown-it/lib/rules_inline/state_inline.js":"// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n"},"lineCount":151}},"error":null,"hash":"87a812ec855d0ebc1f0a0e2e20e68012","cacheData":{"env":{}}}